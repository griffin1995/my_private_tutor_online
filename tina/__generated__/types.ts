//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  landingPage: LandingPage;
  landingPageConnection: LandingPageConnection;
  seasonalContent: SeasonalContent;
  seasonalContentConnection: SeasonalContentConnection;
  page: Page;
  pageConnection: PageConnection;
  post: Post;
  postConnection: PostConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLandingPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLandingPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LandingPageFilter>;
};


export type QuerySeasonalContentArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySeasonalContentConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SeasonalContentFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};

export type DocumentFilter = {
  landingPage?: InputMaybe<LandingPageFilter>;
  seasonalContent?: InputMaybe<SeasonalContentFilter>;
  page?: InputMaybe<PageFilter>;
  post?: InputMaybe<PostFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = LandingPage | SeasonalContent | Page | Post | Folder;

export type LandingPageHeaderNavigation = {
  __typename?: 'LandingPageHeaderNavigation';
  label: Scalars['String']['output'];
  href: Scalars['String']['output'];
};

export type LandingPageHeader = {
  __typename?: 'LandingPageHeader';
  siteName: Scalars['String']['output'];
  navigation?: Maybe<Array<Maybe<LandingPageHeaderNavigation>>>;
};

export type LandingPageHero = {
  __typename?: 'LandingPageHero';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  primaryButtonText: Scalars['String']['output'];
  secondaryButtonText: Scalars['String']['output'];
  videoPlaceholder: Scalars['String']['output'];
  videoPlaceholderAlt: Scalars['String']['output'];
};

export type LandingPageTrustIndicatorsIndicators = {
  __typename?: 'LandingPageTrustIndicatorsIndicators';
  icon: Scalars['String']['output'];
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
};

export type LandingPageTrustIndicators = {
  __typename?: 'LandingPageTrustIndicators';
  sectionTitle: Scalars['String']['output'];
  sectionDescription: Scalars['String']['output'];
  indicators?: Maybe<Array<Maybe<LandingPageTrustIndicatorsIndicators>>>;
};

export type LandingPageTestimonialsTestimonials = {
  __typename?: 'LandingPageTestimonialsTestimonials';
  quote: Scalars['String']['output'];
  author: Scalars['String']['output'];
  role: Scalars['String']['output'];
  avatar?: Maybe<Scalars['String']['output']>;
  rating?: Maybe<Scalars['Float']['output']>;
};

export type LandingPageTestimonials = {
  __typename?: 'LandingPageTestimonials';
  sectionTitle: Scalars['String']['output'];
  sectionSubtitle: Scalars['String']['output'];
  testimonials?: Maybe<Array<Maybe<LandingPageTestimonialsTestimonials>>>;
};

export type LandingPageServicesServicesFeatures = {
  __typename?: 'LandingPageServicesServicesFeatures';
  feature: Scalars['String']['output'];
};

export type LandingPageServicesServices = {
  __typename?: 'LandingPageServicesServices';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon: Scalars['String']['output'];
  features?: Maybe<Array<Maybe<LandingPageServicesServicesFeatures>>>;
  ctaText?: Maybe<Scalars['String']['output']>;
  ctaLink?: Maybe<Scalars['String']['output']>;
};

export type LandingPageServices = {
  __typename?: 'LandingPageServices';
  sectionTitle: Scalars['String']['output'];
  sectionDescription: Scalars['String']['output'];
  services?: Maybe<Array<Maybe<LandingPageServicesServices>>>;
};

export type LandingPageResultsStatistics = {
  __typename?: 'LandingPageResultsStatistics';
  number: Scalars['String']['output'];
  label: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
};

export type LandingPageResults = {
  __typename?: 'LandingPageResults';
  sectionTitle: Scalars['String']['output'];
  sectionDescription: Scalars['String']['output'];
  statistics?: Maybe<Array<Maybe<LandingPageResultsStatistics>>>;
};

export type LandingPageContactContactInfo = {
  __typename?: 'LandingPageContactContactInfo';
  email: Scalars['String']['output'];
  phone: Scalars['String']['output'];
  address?: Maybe<Scalars['String']['output']>;
};

export type LandingPageContact = {
  __typename?: 'LandingPageContact';
  sectionTitle: Scalars['String']['output'];
  sectionDescription: Scalars['String']['output'];
  formTitle: Scalars['String']['output'];
  formDescription?: Maybe<Scalars['String']['output']>;
  submitButtonText: Scalars['String']['output'];
  contactInfo?: Maybe<LandingPageContactContactInfo>;
};

export type LandingPageFooterFooterSectionsLinks = {
  __typename?: 'LandingPageFooterFooterSectionsLinks';
  label: Scalars['String']['output'];
  href: Scalars['String']['output'];
};

export type LandingPageFooterFooterSections = {
  __typename?: 'LandingPageFooterFooterSections';
  title: Scalars['String']['output'];
  links?: Maybe<Array<Maybe<LandingPageFooterFooterSectionsLinks>>>;
};

export type LandingPageFooter = {
  __typename?: 'LandingPageFooter';
  companyName: Scalars['String']['output'];
  description: Scalars['String']['output'];
  footerSections?: Maybe<Array<Maybe<LandingPageFooterFooterSections>>>;
  copyrightText: Scalars['String']['output'];
};

export type LandingPage = Node & Document & {
  __typename?: 'LandingPage';
  header?: Maybe<LandingPageHeader>;
  hero?: Maybe<LandingPageHero>;
  trustIndicators?: Maybe<LandingPageTrustIndicators>;
  testimonials?: Maybe<LandingPageTestimonials>;
  services?: Maybe<LandingPageServices>;
  results?: Maybe<LandingPageResults>;
  contact?: Maybe<LandingPageContact>;
  footer?: Maybe<LandingPageFooter>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type LandingPageHeaderNavigationFilter = {
  label?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
};

export type LandingPageHeaderFilter = {
  siteName?: InputMaybe<StringFilter>;
  navigation?: InputMaybe<LandingPageHeaderNavigationFilter>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type LandingPageHeroFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  primaryButtonText?: InputMaybe<StringFilter>;
  secondaryButtonText?: InputMaybe<StringFilter>;
  videoPlaceholder?: InputMaybe<ImageFilter>;
  videoPlaceholderAlt?: InputMaybe<StringFilter>;
};

export type LandingPageTrustIndicatorsIndicatorsFilter = {
  icon?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type LandingPageTrustIndicatorsFilter = {
  sectionTitle?: InputMaybe<StringFilter>;
  sectionDescription?: InputMaybe<StringFilter>;
  indicators?: InputMaybe<LandingPageTrustIndicatorsIndicatorsFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type LandingPageTestimonialsTestimonialsFilter = {
  quote?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  role?: InputMaybe<StringFilter>;
  avatar?: InputMaybe<ImageFilter>;
  rating?: InputMaybe<NumberFilter>;
};

export type LandingPageTestimonialsFilter = {
  sectionTitle?: InputMaybe<StringFilter>;
  sectionSubtitle?: InputMaybe<StringFilter>;
  testimonials?: InputMaybe<LandingPageTestimonialsTestimonialsFilter>;
};

export type LandingPageServicesServicesFeaturesFilter = {
  feature?: InputMaybe<StringFilter>;
};

export type LandingPageServicesServicesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  features?: InputMaybe<LandingPageServicesServicesFeaturesFilter>;
  ctaText?: InputMaybe<StringFilter>;
  ctaLink?: InputMaybe<StringFilter>;
};

export type LandingPageServicesFilter = {
  sectionTitle?: InputMaybe<StringFilter>;
  sectionDescription?: InputMaybe<StringFilter>;
  services?: InputMaybe<LandingPageServicesServicesFilter>;
};

export type LandingPageResultsStatisticsFilter = {
  number?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type LandingPageResultsFilter = {
  sectionTitle?: InputMaybe<StringFilter>;
  sectionDescription?: InputMaybe<StringFilter>;
  statistics?: InputMaybe<LandingPageResultsStatisticsFilter>;
};

export type LandingPageContactContactInfoFilter = {
  email?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  address?: InputMaybe<StringFilter>;
};

export type LandingPageContactFilter = {
  sectionTitle?: InputMaybe<StringFilter>;
  sectionDescription?: InputMaybe<StringFilter>;
  formTitle?: InputMaybe<StringFilter>;
  formDescription?: InputMaybe<StringFilter>;
  submitButtonText?: InputMaybe<StringFilter>;
  contactInfo?: InputMaybe<LandingPageContactContactInfoFilter>;
};

export type LandingPageFooterFooterSectionsLinksFilter = {
  label?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
};

export type LandingPageFooterFooterSectionsFilter = {
  title?: InputMaybe<StringFilter>;
  links?: InputMaybe<LandingPageFooterFooterSectionsLinksFilter>;
};

export type LandingPageFooterFilter = {
  companyName?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  footerSections?: InputMaybe<LandingPageFooterFooterSectionsFilter>;
  copyrightText?: InputMaybe<StringFilter>;
};

export type LandingPageFilter = {
  header?: InputMaybe<LandingPageHeaderFilter>;
  hero?: InputMaybe<LandingPageHeroFilter>;
  trustIndicators?: InputMaybe<LandingPageTrustIndicatorsFilter>;
  testimonials?: InputMaybe<LandingPageTestimonialsFilter>;
  services?: InputMaybe<LandingPageServicesFilter>;
  results?: InputMaybe<LandingPageResultsFilter>;
  contact?: InputMaybe<LandingPageContactFilter>;
  footer?: InputMaybe<LandingPageFooterFilter>;
};

export type LandingPageConnectionEdges = {
  __typename?: 'LandingPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<LandingPage>;
};

export type LandingPageConnection = Connection & {
  __typename?: 'LandingPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<LandingPageConnectionEdges>>>;
};

export type SeasonalContentSeasonsSpring = {
  __typename?: 'SeasonalContentSeasonsSpring';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  ctaText: Scalars['String']['output'];
  focusArea: Scalars['String']['output'];
  bgGradient: Scalars['String']['output'];
};

export type SeasonalContentSeasonsSummer = {
  __typename?: 'SeasonalContentSeasonsSummer';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  ctaText: Scalars['String']['output'];
  focusArea: Scalars['String']['output'];
  bgGradient: Scalars['String']['output'];
};

export type SeasonalContentSeasonsAutumn = {
  __typename?: 'SeasonalContentSeasonsAutumn';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  ctaText: Scalars['String']['output'];
  focusArea: Scalars['String']['output'];
  bgGradient: Scalars['String']['output'];
};

export type SeasonalContentSeasonsWinter = {
  __typename?: 'SeasonalContentSeasonsWinter';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  ctaText: Scalars['String']['output'];
  focusArea: Scalars['String']['output'];
  bgGradient: Scalars['String']['output'];
};

export type SeasonalContentSeasons = {
  __typename?: 'SeasonalContentSeasons';
  spring?: Maybe<SeasonalContentSeasonsSpring>;
  summer?: Maybe<SeasonalContentSeasonsSummer>;
  autumn?: Maybe<SeasonalContentSeasonsAutumn>;
  winter?: Maybe<SeasonalContentSeasonsWinter>;
};

export type SeasonalContent = Node & Document & {
  __typename?: 'SeasonalContent';
  seasons?: Maybe<SeasonalContentSeasons>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SeasonalContentSeasonsSpringFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
  focusArea?: InputMaybe<StringFilter>;
  bgGradient?: InputMaybe<StringFilter>;
};

export type SeasonalContentSeasonsSummerFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
  focusArea?: InputMaybe<StringFilter>;
  bgGradient?: InputMaybe<StringFilter>;
};

export type SeasonalContentSeasonsAutumnFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
  focusArea?: InputMaybe<StringFilter>;
  bgGradient?: InputMaybe<StringFilter>;
};

export type SeasonalContentSeasonsWinterFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
  focusArea?: InputMaybe<StringFilter>;
  bgGradient?: InputMaybe<StringFilter>;
};

export type SeasonalContentSeasonsFilter = {
  spring?: InputMaybe<SeasonalContentSeasonsSpringFilter>;
  summer?: InputMaybe<SeasonalContentSeasonsSummerFilter>;
  autumn?: InputMaybe<SeasonalContentSeasonsAutumnFilter>;
  winter?: InputMaybe<SeasonalContentSeasonsWinterFilter>;
};

export type SeasonalContentFilter = {
  seasons?: InputMaybe<SeasonalContentSeasonsFilter>;
};

export type SeasonalContentConnectionEdges = {
  __typename?: 'SeasonalContentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<SeasonalContent>;
};

export type SeasonalContentConnection = Connection & {
  __typename?: 'SeasonalContentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SeasonalContentConnectionEdges>>>;
};

export type Page = Node & Document & {
  __typename?: 'Page';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  date: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateLandingPage: LandingPage;
  createLandingPage: LandingPage;
  updateSeasonalContent: SeasonalContent;
  createSeasonalContent: SeasonalContent;
  updatePage: Page;
  createPage: Page;
  updatePost: Post;
  createPost: Post;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateLandingPageArgs = {
  relativePath: Scalars['String']['input'];
  params: LandingPageMutation;
};


export type MutationCreateLandingPageArgs = {
  relativePath: Scalars['String']['input'];
  params: LandingPageMutation;
};


export type MutationUpdateSeasonalContentArgs = {
  relativePath: Scalars['String']['input'];
  params: SeasonalContentMutation;
};


export type MutationCreateSeasonalContentArgs = {
  relativePath: Scalars['String']['input'];
  params: SeasonalContentMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};

export type DocumentUpdateMutation = {
  landingPage?: InputMaybe<LandingPageMutation>;
  seasonalContent?: InputMaybe<SeasonalContentMutation>;
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  landingPage?: InputMaybe<LandingPageMutation>;
  seasonalContent?: InputMaybe<SeasonalContentMutation>;
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
};

export type LandingPageHeaderNavigationMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
};

export type LandingPageHeaderMutation = {
  siteName?: InputMaybe<Scalars['String']['input']>;
  navigation?: InputMaybe<Array<InputMaybe<LandingPageHeaderNavigationMutation>>>;
};

export type LandingPageHeroMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  primaryButtonText?: InputMaybe<Scalars['String']['input']>;
  secondaryButtonText?: InputMaybe<Scalars['String']['input']>;
  videoPlaceholder?: InputMaybe<Scalars['String']['input']>;
  videoPlaceholderAlt?: InputMaybe<Scalars['String']['input']>;
};

export type LandingPageTrustIndicatorsIndicatorsMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type LandingPageTrustIndicatorsMutation = {
  sectionTitle?: InputMaybe<Scalars['String']['input']>;
  sectionDescription?: InputMaybe<Scalars['String']['input']>;
  indicators?: InputMaybe<Array<InputMaybe<LandingPageTrustIndicatorsIndicatorsMutation>>>;
};

export type LandingPageTestimonialsTestimonialsMutation = {
  quote?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  avatar?: InputMaybe<Scalars['String']['input']>;
  rating?: InputMaybe<Scalars['Float']['input']>;
};

export type LandingPageTestimonialsMutation = {
  sectionTitle?: InputMaybe<Scalars['String']['input']>;
  sectionSubtitle?: InputMaybe<Scalars['String']['input']>;
  testimonials?: InputMaybe<Array<InputMaybe<LandingPageTestimonialsTestimonialsMutation>>>;
};

export type LandingPageServicesServicesFeaturesMutation = {
  feature?: InputMaybe<Scalars['String']['input']>;
};

export type LandingPageServicesServicesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<LandingPageServicesServicesFeaturesMutation>>>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
};

export type LandingPageServicesMutation = {
  sectionTitle?: InputMaybe<Scalars['String']['input']>;
  sectionDescription?: InputMaybe<Scalars['String']['input']>;
  services?: InputMaybe<Array<InputMaybe<LandingPageServicesServicesMutation>>>;
};

export type LandingPageResultsStatisticsMutation = {
  number?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type LandingPageResultsMutation = {
  sectionTitle?: InputMaybe<Scalars['String']['input']>;
  sectionDescription?: InputMaybe<Scalars['String']['input']>;
  statistics?: InputMaybe<Array<InputMaybe<LandingPageResultsStatisticsMutation>>>;
};

export type LandingPageContactContactInfoMutation = {
  email?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
};

export type LandingPageContactMutation = {
  sectionTitle?: InputMaybe<Scalars['String']['input']>;
  sectionDescription?: InputMaybe<Scalars['String']['input']>;
  formTitle?: InputMaybe<Scalars['String']['input']>;
  formDescription?: InputMaybe<Scalars['String']['input']>;
  submitButtonText?: InputMaybe<Scalars['String']['input']>;
  contactInfo?: InputMaybe<LandingPageContactContactInfoMutation>;
};

export type LandingPageFooterFooterSectionsLinksMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
};

export type LandingPageFooterFooterSectionsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  links?: InputMaybe<Array<InputMaybe<LandingPageFooterFooterSectionsLinksMutation>>>;
};

export type LandingPageFooterMutation = {
  companyName?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  footerSections?: InputMaybe<Array<InputMaybe<LandingPageFooterFooterSectionsMutation>>>;
  copyrightText?: InputMaybe<Scalars['String']['input']>;
};

export type LandingPageMutation = {
  header?: InputMaybe<LandingPageHeaderMutation>;
  hero?: InputMaybe<LandingPageHeroMutation>;
  trustIndicators?: InputMaybe<LandingPageTrustIndicatorsMutation>;
  testimonials?: InputMaybe<LandingPageTestimonialsMutation>;
  services?: InputMaybe<LandingPageServicesMutation>;
  results?: InputMaybe<LandingPageResultsMutation>;
  contact?: InputMaybe<LandingPageContactMutation>;
  footer?: InputMaybe<LandingPageFooterMutation>;
};

export type SeasonalContentSeasonsSpringMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  focusArea?: InputMaybe<Scalars['String']['input']>;
  bgGradient?: InputMaybe<Scalars['String']['input']>;
};

export type SeasonalContentSeasonsSummerMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  focusArea?: InputMaybe<Scalars['String']['input']>;
  bgGradient?: InputMaybe<Scalars['String']['input']>;
};

export type SeasonalContentSeasonsAutumnMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  focusArea?: InputMaybe<Scalars['String']['input']>;
  bgGradient?: InputMaybe<Scalars['String']['input']>;
};

export type SeasonalContentSeasonsWinterMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  focusArea?: InputMaybe<Scalars['String']['input']>;
  bgGradient?: InputMaybe<Scalars['String']['input']>;
};

export type SeasonalContentSeasonsMutation = {
  spring?: InputMaybe<SeasonalContentSeasonsSpringMutation>;
  summer?: InputMaybe<SeasonalContentSeasonsSummerMutation>;
  autumn?: InputMaybe<SeasonalContentSeasonsAutumnMutation>;
  winter?: InputMaybe<SeasonalContentSeasonsWinterMutation>;
};

export type SeasonalContentMutation = {
  seasons?: InputMaybe<SeasonalContentSeasonsMutation>;
};

export type PageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type LandingPagePartsFragment = { __typename: 'LandingPage', header?: { __typename: 'LandingPageHeader', siteName: string, navigation?: Array<{ __typename: 'LandingPageHeaderNavigation', label: string, href: string } | null> | null } | null, hero?: { __typename: 'LandingPageHero', title: string, description: string, primaryButtonText: string, secondaryButtonText: string, videoPlaceholder: string, videoPlaceholderAlt: string } | null, trustIndicators?: { __typename: 'LandingPageTrustIndicators', sectionTitle: string, sectionDescription: string, indicators?: Array<{ __typename: 'LandingPageTrustIndicatorsIndicators', icon: string, title: string, description: string } | null> | null } | null, testimonials?: { __typename: 'LandingPageTestimonials', sectionTitle: string, sectionSubtitle: string, testimonials?: Array<{ __typename: 'LandingPageTestimonialsTestimonials', quote: string, author: string, role: string, avatar?: string | null, rating?: number | null } | null> | null } | null, services?: { __typename: 'LandingPageServices', sectionTitle: string, sectionDescription: string, services?: Array<{ __typename: 'LandingPageServicesServices', title: string, description: string, icon: string, ctaText?: string | null, ctaLink?: string | null, features?: Array<{ __typename: 'LandingPageServicesServicesFeatures', feature: string } | null> | null } | null> | null } | null, results?: { __typename: 'LandingPageResults', sectionTitle: string, sectionDescription: string, statistics?: Array<{ __typename: 'LandingPageResultsStatistics', number: string, label: string, description?: string | null, icon?: string | null } | null> | null } | null, contact?: { __typename: 'LandingPageContact', sectionTitle: string, sectionDescription: string, formTitle: string, formDescription?: string | null, submitButtonText: string, contactInfo?: { __typename: 'LandingPageContactContactInfo', email: string, phone: string, address?: string | null } | null } | null, footer?: { __typename: 'LandingPageFooter', companyName: string, description: string, copyrightText: string, footerSections?: Array<{ __typename: 'LandingPageFooterFooterSections', title: string, links?: Array<{ __typename: 'LandingPageFooterFooterSectionsLinks', label: string, href: string } | null> | null } | null> | null } | null };

export type SeasonalContentPartsFragment = { __typename: 'SeasonalContent', seasons?: { __typename: 'SeasonalContentSeasons', spring?: { __typename: 'SeasonalContentSeasonsSpring', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null, summer?: { __typename: 'SeasonalContentSeasonsSummer', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null, autumn?: { __typename: 'SeasonalContentSeasonsAutumn', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null, winter?: { __typename: 'SeasonalContentSeasonsWinter', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null } | null };

export type PagePartsFragment = { __typename: 'Page', title: string, description?: string | null, body?: any | null };

export type PostPartsFragment = { __typename: 'Post', title: string, description?: string | null, date: string, body?: any | null };

export type LandingPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type LandingPageQuery = { __typename?: 'Query', landingPage: { __typename: 'LandingPage', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'LandingPageHeader', siteName: string, navigation?: Array<{ __typename: 'LandingPageHeaderNavigation', label: string, href: string } | null> | null } | null, hero?: { __typename: 'LandingPageHero', title: string, description: string, primaryButtonText: string, secondaryButtonText: string, videoPlaceholder: string, videoPlaceholderAlt: string } | null, trustIndicators?: { __typename: 'LandingPageTrustIndicators', sectionTitle: string, sectionDescription: string, indicators?: Array<{ __typename: 'LandingPageTrustIndicatorsIndicators', icon: string, title: string, description: string } | null> | null } | null, testimonials?: { __typename: 'LandingPageTestimonials', sectionTitle: string, sectionSubtitle: string, testimonials?: Array<{ __typename: 'LandingPageTestimonialsTestimonials', quote: string, author: string, role: string, avatar?: string | null, rating?: number | null } | null> | null } | null, services?: { __typename: 'LandingPageServices', sectionTitle: string, sectionDescription: string, services?: Array<{ __typename: 'LandingPageServicesServices', title: string, description: string, icon: string, ctaText?: string | null, ctaLink?: string | null, features?: Array<{ __typename: 'LandingPageServicesServicesFeatures', feature: string } | null> | null } | null> | null } | null, results?: { __typename: 'LandingPageResults', sectionTitle: string, sectionDescription: string, statistics?: Array<{ __typename: 'LandingPageResultsStatistics', number: string, label: string, description?: string | null, icon?: string | null } | null> | null } | null, contact?: { __typename: 'LandingPageContact', sectionTitle: string, sectionDescription: string, formTitle: string, formDescription?: string | null, submitButtonText: string, contactInfo?: { __typename: 'LandingPageContactContactInfo', email: string, phone: string, address?: string | null } | null } | null, footer?: { __typename: 'LandingPageFooter', companyName: string, description: string, copyrightText: string, footerSections?: Array<{ __typename: 'LandingPageFooterFooterSections', title: string, links?: Array<{ __typename: 'LandingPageFooterFooterSectionsLinks', label: string, href: string } | null> | null } | null> | null } | null } };

export type LandingPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LandingPageFilter>;
}>;


export type LandingPageConnectionQuery = { __typename?: 'Query', landingPageConnection: { __typename?: 'LandingPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'LandingPageConnectionEdges', cursor: string, node?: { __typename: 'LandingPage', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'LandingPageHeader', siteName: string, navigation?: Array<{ __typename: 'LandingPageHeaderNavigation', label: string, href: string } | null> | null } | null, hero?: { __typename: 'LandingPageHero', title: string, description: string, primaryButtonText: string, secondaryButtonText: string, videoPlaceholder: string, videoPlaceholderAlt: string } | null, trustIndicators?: { __typename: 'LandingPageTrustIndicators', sectionTitle: string, sectionDescription: string, indicators?: Array<{ __typename: 'LandingPageTrustIndicatorsIndicators', icon: string, title: string, description: string } | null> | null } | null, testimonials?: { __typename: 'LandingPageTestimonials', sectionTitle: string, sectionSubtitle: string, testimonials?: Array<{ __typename: 'LandingPageTestimonialsTestimonials', quote: string, author: string, role: string, avatar?: string | null, rating?: number | null } | null> | null } | null, services?: { __typename: 'LandingPageServices', sectionTitle: string, sectionDescription: string, services?: Array<{ __typename: 'LandingPageServicesServices', title: string, description: string, icon: string, ctaText?: string | null, ctaLink?: string | null, features?: Array<{ __typename: 'LandingPageServicesServicesFeatures', feature: string } | null> | null } | null> | null } | null, results?: { __typename: 'LandingPageResults', sectionTitle: string, sectionDescription: string, statistics?: Array<{ __typename: 'LandingPageResultsStatistics', number: string, label: string, description?: string | null, icon?: string | null } | null> | null } | null, contact?: { __typename: 'LandingPageContact', sectionTitle: string, sectionDescription: string, formTitle: string, formDescription?: string | null, submitButtonText: string, contactInfo?: { __typename: 'LandingPageContactContactInfo', email: string, phone: string, address?: string | null } | null } | null, footer?: { __typename: 'LandingPageFooter', companyName: string, description: string, copyrightText: string, footerSections?: Array<{ __typename: 'LandingPageFooterFooterSections', title: string, links?: Array<{ __typename: 'LandingPageFooterFooterSectionsLinks', label: string, href: string } | null> | null } | null> | null } | null } | null } | null> | null } };

export type SeasonalContentQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SeasonalContentQuery = { __typename?: 'Query', seasonalContent: { __typename: 'SeasonalContent', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seasons?: { __typename: 'SeasonalContentSeasons', spring?: { __typename: 'SeasonalContentSeasonsSpring', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null, summer?: { __typename: 'SeasonalContentSeasonsSummer', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null, autumn?: { __typename: 'SeasonalContentSeasonsAutumn', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null, winter?: { __typename: 'SeasonalContentSeasonsWinter', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null } | null } };

export type SeasonalContentConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SeasonalContentFilter>;
}>;


export type SeasonalContentConnectionQuery = { __typename?: 'Query', seasonalContentConnection: { __typename?: 'SeasonalContentConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SeasonalContentConnectionEdges', cursor: string, node?: { __typename: 'SeasonalContent', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seasons?: { __typename: 'SeasonalContentSeasons', spring?: { __typename: 'SeasonalContentSeasonsSpring', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null, summer?: { __typename: 'SeasonalContentSeasonsSummer', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null, autumn?: { __typename: 'SeasonalContentSeasonsAutumn', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null, winter?: { __typename: 'SeasonalContentSeasonsWinter', title: string, description: string, ctaText: string, focusArea: string, bgGradient: string } | null } | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, title: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, title: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Post', id: string, title: string, description?: string | null, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename: 'Post', id: string, title: string, description?: string | null, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const LandingPagePartsFragmentDoc = gql`
    fragment LandingPageParts on LandingPage {
  __typename
  header {
    __typename
    siteName
    navigation {
      __typename
      label
      href
    }
  }
  hero {
    __typename
    title
    description
    primaryButtonText
    secondaryButtonText
    videoPlaceholder
    videoPlaceholderAlt
  }
  trustIndicators {
    __typename
    sectionTitle
    sectionDescription
    indicators {
      __typename
      icon
      title
      description
    }
  }
  testimonials {
    __typename
    sectionTitle
    sectionSubtitle
    testimonials {
      __typename
      quote
      author
      role
      avatar
      rating
    }
  }
  services {
    __typename
    sectionTitle
    sectionDescription
    services {
      __typename
      title
      description
      icon
      features {
        __typename
        feature
      }
      ctaText
      ctaLink
    }
  }
  results {
    __typename
    sectionTitle
    sectionDescription
    statistics {
      __typename
      number
      label
      description
      icon
    }
  }
  contact {
    __typename
    sectionTitle
    sectionDescription
    formTitle
    formDescription
    submitButtonText
    contactInfo {
      __typename
      email
      phone
      address
    }
  }
  footer {
    __typename
    companyName
    description
    footerSections {
      __typename
      title
      links {
        __typename
        label
        href
      }
    }
    copyrightText
  }
}
    `;
export const SeasonalContentPartsFragmentDoc = gql`
    fragment SeasonalContentParts on SeasonalContent {
  __typename
  seasons {
    __typename
    spring {
      __typename
      title
      description
      ctaText
      focusArea
      bgGradient
    }
    summer {
      __typename
      title
      description
      ctaText
      focusArea
      bgGradient
    }
    autumn {
      __typename
      title
      description
      ctaText
      focusArea
      bgGradient
    }
    winter {
      __typename
      title
      description
      ctaText
      focusArea
      bgGradient
    }
  }
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  title
  description
  body
}
    `;
export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  __typename
  title
  description
  date
  body
}
    `;
export const LandingPageDocument = gql`
    query landingPage($relativePath: String!) {
  landingPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...LandingPageParts
  }
}
    ${LandingPagePartsFragmentDoc}`;
export const LandingPageConnectionDocument = gql`
    query landingPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: LandingPageFilter) {
  landingPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...LandingPageParts
      }
    }
  }
}
    ${LandingPagePartsFragmentDoc}`;
export const SeasonalContentDocument = gql`
    query seasonalContent($relativePath: String!) {
  seasonalContent(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SeasonalContentParts
  }
}
    ${SeasonalContentPartsFragmentDoc}`;
export const SeasonalContentConnectionDocument = gql`
    query seasonalContentConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SeasonalContentFilter) {
  seasonalContentConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SeasonalContentParts
      }
    }
  }
}
    ${SeasonalContentPartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      landingPage(variables: LandingPageQueryVariables, options?: C): Promise<{data: LandingPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LandingPageQueryVariables, query: string}> {
        return requester<{data: LandingPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LandingPageQueryVariables, query: string}, LandingPageQueryVariables>(LandingPageDocument, variables, options);
      },
    landingPageConnection(variables?: LandingPageConnectionQueryVariables, options?: C): Promise<{data: LandingPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LandingPageConnectionQueryVariables, query: string}> {
        return requester<{data: LandingPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LandingPageConnectionQueryVariables, query: string}, LandingPageConnectionQueryVariables>(LandingPageConnectionDocument, variables, options);
      },
    seasonalContent(variables: SeasonalContentQueryVariables, options?: C): Promise<{data: SeasonalContentQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SeasonalContentQueryVariables, query: string}> {
        return requester<{data: SeasonalContentQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SeasonalContentQueryVariables, query: string}, SeasonalContentQueryVariables>(SeasonalContentDocument, variables, options);
      },
    seasonalContentConnection(variables?: SeasonalContentConnectionQueryVariables, options?: C): Promise<{data: SeasonalContentConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SeasonalContentConnectionQueryVariables, query: string}> {
        return requester<{data: SeasonalContentConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SeasonalContentConnectionQueryVariables, query: string}, SeasonalContentConnectionQueryVariables>(SeasonalContentConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "https://content.tinajs.io/1.5/content/local/github/main",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  