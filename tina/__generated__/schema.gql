# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""
References another document, used as a foreign key
"""
scalar Reference

"""
"""
scalar JSON

type SystemInfo {
	filename: String!
	title: String
	basename: String!
	hasReferences: Boolean
	breadcrumbs(excludeExtension: Boolean): [String!]!
	path: String!
	relativePath: String!
	extension: String!
	template: String!
	collection: Collection!
}

type Folder {
	name: String!
	path: String!
}

type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
	startCursor: String!
	endCursor: String!
}

"""
"""
interface Node {
	id: ID!
}

"""
"""
interface Document {
	id: ID!
	_sys: SystemInfo
	_values: JSON!
}

"""
A relay-compliant pagination connection
"""
interface Connection {
	totalCount: Float!
	pageInfo: PageInfo!
}

type Query {
	getOptimizedQuery(queryString: String!): String
	collection(collection: String): Collection!
	collections: [Collection!]!
	node(id: String): Node!
	document(collection: String, relativePath: String): DocumentNode!
	landingPage(relativePath: String): LandingPage!
	landingPageConnection(
		before: String
		after: String
		first: Float
		last: Float
		sort: String
		filter: LandingPageFilter
	): LandingPageConnection!
	seasonalContent(relativePath: String): SeasonalContent!
	seasonalContentConnection(
		before: String
		after: String
		first: Float
		last: Float
		sort: String
		filter: SeasonalContentFilter
	): SeasonalContentConnection!
	page(relativePath: String): Page!
	pageConnection(
		before: String
		after: String
		first: Float
		last: Float
		sort: String
		filter: PageFilter
	): PageConnection!
	post(relativePath: String): Post!
	postConnection(
		before: String
		after: String
		first: Float
		last: Float
		sort: String
		filter: PostFilter
	): PostConnection!
}

input DocumentFilter {
	landingPage: LandingPageFilter
	seasonalContent: SeasonalContentFilter
	page: PageFilter
	post: PostFilter
}

type DocumentConnectionEdges {
	cursor: String!
	node: DocumentNode
}

type DocumentConnection implements Connection {
	pageInfo: PageInfo!
	totalCount: Float!
	edges: [DocumentConnectionEdges]
}

type Collection {
	name: String!
	slug: String!
	label: String
	path: String!
	format: String
	matches: String
	templates: [JSON]
	fields: [JSON]
	documents(
		before: String
		after: String
		first: Float
		last: Float
		sort: String
		filter: DocumentFilter
		folder: String
	): DocumentConnection!
}

union DocumentNode = LandingPage | SeasonalContent | Page | Post | Folder

type LandingPageHeaderNavigation {
	label: String!
	href: String!
}

type LandingPageHeader {
	siteName: String!
	navigation: [LandingPageHeaderNavigation]
}

type LandingPageHero {
	title: String!
	description: String!
	primaryButtonText: String!
	secondaryButtonText: String!
	videoPlaceholder: String!
	videoPlaceholderAlt: String!
}

type LandingPageTrustIndicatorsIndicators {
	icon: String!
	title: String!
	description: String!
}

type LandingPageTrustIndicators {
	sectionTitle: String!
	sectionDescription: String!
	indicators: [LandingPageTrustIndicatorsIndicators]
}

type LandingPageTestimonialsTestimonials {
	quote: String!
	author: String!
	role: String!
	avatar: String
	rating: Float
}

type LandingPageTestimonials {
	sectionTitle: String!
	sectionSubtitle: String!
	testimonials: [LandingPageTestimonialsTestimonials]
}

type LandingPageServicesServicesFeatures {
	feature: String!
}

type LandingPageServicesServices {
	title: String!
	description: String!
	icon: String!
	features: [LandingPageServicesServicesFeatures]
	ctaText: String
	ctaLink: String
}

type LandingPageServices {
	sectionTitle: String!
	sectionDescription: String!
	services: [LandingPageServicesServices]
}

type LandingPageResultsStatistics {
	number: String!
	label: String!
	description: String
	icon: String
}

type LandingPageResults {
	sectionTitle: String!
	sectionDescription: String!
	statistics: [LandingPageResultsStatistics]
}

type LandingPageContactContactInfo {
	email: String!
	phone: String!
	address: String
}

type LandingPageContact {
	sectionTitle: String!
	sectionDescription: String!
	formTitle: String!
	formDescription: String
	submitButtonText: String!
	contactInfo: LandingPageContactContactInfo
}

type LandingPageFooterFooterSectionsLinks {
	label: String!
	href: String!
}

type LandingPageFooterFooterSections {
	title: String!
	links: [LandingPageFooterFooterSectionsLinks]
}

type LandingPageFooter {
	companyName: String!
	description: String!
	footerSections: [LandingPageFooterFooterSections]
	copyrightText: String!
}

type LandingPage implements Node & Document {
	header: LandingPageHeader
	hero: LandingPageHero
	trustIndicators: LandingPageTrustIndicators
	testimonials: LandingPageTestimonials
	services: LandingPageServices
	results: LandingPageResults
	contact: LandingPageContact
	footer: LandingPageFooter
	id: ID!
	_sys: SystemInfo!
	_values: JSON!
}

input StringFilter {
	startsWith: String
	eq: String
	exists: Boolean
	in: [String]
}

input LandingPageHeaderNavigationFilter {
	label: StringFilter
	href: StringFilter
}

input LandingPageHeaderFilter {
	siteName: StringFilter
	navigation: LandingPageHeaderNavigationFilter
}

input ImageFilter {
	startsWith: String
	eq: String
	exists: Boolean
	in: [String]
}

input LandingPageHeroFilter {
	title: StringFilter
	description: StringFilter
	primaryButtonText: StringFilter
	secondaryButtonText: StringFilter
	videoPlaceholder: ImageFilter
	videoPlaceholderAlt: StringFilter
}

input LandingPageTrustIndicatorsIndicatorsFilter {
	icon: StringFilter
	title: StringFilter
	description: StringFilter
}

input LandingPageTrustIndicatorsFilter {
	sectionTitle: StringFilter
	sectionDescription: StringFilter
	indicators: LandingPageTrustIndicatorsIndicatorsFilter
}

input NumberFilter {
	lt: Float
	lte: Float
	gte: Float
	gt: Float
	eq: Float
	exists: Boolean
	in: [Float]
}

input LandingPageTestimonialsTestimonialsFilter {
	quote: StringFilter
	author: StringFilter
	role: StringFilter
	avatar: ImageFilter
	rating: NumberFilter
}

input LandingPageTestimonialsFilter {
	sectionTitle: StringFilter
	sectionSubtitle: StringFilter
	testimonials: LandingPageTestimonialsTestimonialsFilter
}

input LandingPageServicesServicesFeaturesFilter {
	feature: StringFilter
}

input LandingPageServicesServicesFilter {
	title: StringFilter
	description: StringFilter
	icon: StringFilter
	features: LandingPageServicesServicesFeaturesFilter
	ctaText: StringFilter
	ctaLink: StringFilter
}

input LandingPageServicesFilter {
	sectionTitle: StringFilter
	sectionDescription: StringFilter
	services: LandingPageServicesServicesFilter
}

input LandingPageResultsStatisticsFilter {
	number: StringFilter
	label: StringFilter
	description: StringFilter
	icon: StringFilter
}

input LandingPageResultsFilter {
	sectionTitle: StringFilter
	sectionDescription: StringFilter
	statistics: LandingPageResultsStatisticsFilter
}

input LandingPageContactContactInfoFilter {
	email: StringFilter
	phone: StringFilter
	address: StringFilter
}

input LandingPageContactFilter {
	sectionTitle: StringFilter
	sectionDescription: StringFilter
	formTitle: StringFilter
	formDescription: StringFilter
	submitButtonText: StringFilter
	contactInfo: LandingPageContactContactInfoFilter
}

input LandingPageFooterFooterSectionsLinksFilter {
	label: StringFilter
	href: StringFilter
}

input LandingPageFooterFooterSectionsFilter {
	title: StringFilter
	links: LandingPageFooterFooterSectionsLinksFilter
}

input LandingPageFooterFilter {
	companyName: StringFilter
	description: StringFilter
	footerSections: LandingPageFooterFooterSectionsFilter
	copyrightText: StringFilter
}

input LandingPageFilter {
	header: LandingPageHeaderFilter
	hero: LandingPageHeroFilter
	trustIndicators: LandingPageTrustIndicatorsFilter
	testimonials: LandingPageTestimonialsFilter
	services: LandingPageServicesFilter
	results: LandingPageResultsFilter
	contact: LandingPageContactFilter
	footer: LandingPageFooterFilter
}

type LandingPageConnectionEdges {
	cursor: String!
	node: LandingPage
}

type LandingPageConnection implements Connection {
	pageInfo: PageInfo!
	totalCount: Float!
	edges: [LandingPageConnectionEdges]
}

type SeasonalContentSeasonsSpring {
	title: String!
	description: String!
	ctaText: String!
	focusArea: String!
	bgGradient: String!
}

type SeasonalContentSeasonsSummer {
	title: String!
	description: String!
	ctaText: String!
	focusArea: String!
	bgGradient: String!
}

type SeasonalContentSeasonsAutumn {
	title: String!
	description: String!
	ctaText: String!
	focusArea: String!
	bgGradient: String!
}

type SeasonalContentSeasonsWinter {
	title: String!
	description: String!
	ctaText: String!
	focusArea: String!
	bgGradient: String!
}

type SeasonalContentSeasons {
	spring: SeasonalContentSeasonsSpring
	summer: SeasonalContentSeasonsSummer
	autumn: SeasonalContentSeasonsAutumn
	winter: SeasonalContentSeasonsWinter
}

type SeasonalContent implements Node & Document {
	seasons: SeasonalContentSeasons
	id: ID!
	_sys: SystemInfo!
	_values: JSON!
}

input SeasonalContentSeasonsSpringFilter {
	title: StringFilter
	description: StringFilter
	ctaText: StringFilter
	focusArea: StringFilter
	bgGradient: StringFilter
}

input SeasonalContentSeasonsSummerFilter {
	title: StringFilter
	description: StringFilter
	ctaText: StringFilter
	focusArea: StringFilter
	bgGradient: StringFilter
}

input SeasonalContentSeasonsAutumnFilter {
	title: StringFilter
	description: StringFilter
	ctaText: StringFilter
	focusArea: StringFilter
	bgGradient: StringFilter
}

input SeasonalContentSeasonsWinterFilter {
	title: StringFilter
	description: StringFilter
	ctaText: StringFilter
	focusArea: StringFilter
	bgGradient: StringFilter
}

input SeasonalContentSeasonsFilter {
	spring: SeasonalContentSeasonsSpringFilter
	summer: SeasonalContentSeasonsSummerFilter
	autumn: SeasonalContentSeasonsAutumnFilter
	winter: SeasonalContentSeasonsWinterFilter
}

input SeasonalContentFilter {
	seasons: SeasonalContentSeasonsFilter
}

type SeasonalContentConnectionEdges {
	cursor: String!
	node: SeasonalContent
}

type SeasonalContentConnection implements Connection {
	pageInfo: PageInfo!
	totalCount: Float!
	edges: [SeasonalContentConnectionEdges]
}

type Page implements Node & Document {
	title: String!
	description: String
	body: JSON
	id: ID!
	_sys: SystemInfo!
	_values: JSON!
}

input RichTextFilter {
	startsWith: String
	eq: String
	exists: Boolean
}

input PageFilter {
	title: StringFilter
	description: StringFilter
	body: RichTextFilter
}

type PageConnectionEdges {
	cursor: String!
	node: Page
}

type PageConnection implements Connection {
	pageInfo: PageInfo!
	totalCount: Float!
	edges: [PageConnectionEdges]
}

type Post implements Node & Document {
	title: String!
	description: String
	date: String!
	body: JSON
	id: ID!
	_sys: SystemInfo!
	_values: JSON!
}

input DatetimeFilter {
	after: String
	before: String
	eq: String
	exists: Boolean
	in: [String]
}

input PostFilter {
	title: StringFilter
	description: StringFilter
	date: DatetimeFilter
	body: RichTextFilter
}

type PostConnectionEdges {
	cursor: String!
	node: Post
}

type PostConnection implements Connection {
	pageInfo: PageInfo!
	totalCount: Float!
	edges: [PostConnectionEdges]
}

type Mutation {
	addPendingDocument(
		collection: String!
		relativePath: String!
		template: String
	): DocumentNode!
	updateDocument(
		collection: String
		relativePath: String!
		params: DocumentUpdateMutation!
	): DocumentNode!
	deleteDocument(collection: String, relativePath: String!): DocumentNode!
	createDocument(
		collection: String
		relativePath: String!
		params: DocumentMutation!
	): DocumentNode!
	createFolder(collection: String, relativePath: String!): DocumentNode!
	updateLandingPage(
		relativePath: String!
		params: LandingPageMutation!
	): LandingPage!
	createLandingPage(
		relativePath: String!
		params: LandingPageMutation!
	): LandingPage!
	updateSeasonalContent(
		relativePath: String!
		params: SeasonalContentMutation!
	): SeasonalContent!
	createSeasonalContent(
		relativePath: String!
		params: SeasonalContentMutation!
	): SeasonalContent!
	updatePage(relativePath: String!, params: PageMutation!): Page!
	createPage(relativePath: String!, params: PageMutation!): Page!
	updatePost(relativePath: String!, params: PostMutation!): Post!
	createPost(relativePath: String!, params: PostMutation!): Post!
}

input DocumentUpdateMutation {
	landingPage: LandingPageMutation
	seasonalContent: SeasonalContentMutation
	page: PageMutation
	post: PostMutation
	relativePath: String
}

input DocumentMutation {
	landingPage: LandingPageMutation
	seasonalContent: SeasonalContentMutation
	page: PageMutation
	post: PostMutation
}

input LandingPageHeaderNavigationMutation {
	label: String
	href: String
}

input LandingPageHeaderMutation {
	siteName: String
	navigation: [LandingPageHeaderNavigationMutation]
}

input LandingPageHeroMutation {
	title: String
	description: String
	primaryButtonText: String
	secondaryButtonText: String
	videoPlaceholder: String
	videoPlaceholderAlt: String
}

input LandingPageTrustIndicatorsIndicatorsMutation {
	icon: String
	title: String
	description: String
}

input LandingPageTrustIndicatorsMutation {
	sectionTitle: String
	sectionDescription: String
	indicators: [LandingPageTrustIndicatorsIndicatorsMutation]
}

input LandingPageTestimonialsTestimonialsMutation {
	quote: String
	author: String
	role: String
	avatar: String
	rating: Float
}

input LandingPageTestimonialsMutation {
	sectionTitle: String
	sectionSubtitle: String
	testimonials: [LandingPageTestimonialsTestimonialsMutation]
}

input LandingPageServicesServicesFeaturesMutation {
	feature: String
}

input LandingPageServicesServicesMutation {
	title: String
	description: String
	icon: String
	features: [LandingPageServicesServicesFeaturesMutation]
	ctaText: String
	ctaLink: String
}

input LandingPageServicesMutation {
	sectionTitle: String
	sectionDescription: String
	services: [LandingPageServicesServicesMutation]
}

input LandingPageResultsStatisticsMutation {
	number: String
	label: String
	description: String
	icon: String
}

input LandingPageResultsMutation {
	sectionTitle: String
	sectionDescription: String
	statistics: [LandingPageResultsStatisticsMutation]
}

input LandingPageContactContactInfoMutation {
	email: String
	phone: String
	address: String
}

input LandingPageContactMutation {
	sectionTitle: String
	sectionDescription: String
	formTitle: String
	formDescription: String
	submitButtonText: String
	contactInfo: LandingPageContactContactInfoMutation
}

input LandingPageFooterFooterSectionsLinksMutation {
	label: String
	href: String
}

input LandingPageFooterFooterSectionsMutation {
	title: String
	links: [LandingPageFooterFooterSectionsLinksMutation]
}

input LandingPageFooterMutation {
	companyName: String
	description: String
	footerSections: [LandingPageFooterFooterSectionsMutation]
	copyrightText: String
}

input LandingPageMutation {
	header: LandingPageHeaderMutation
	hero: LandingPageHeroMutation
	trustIndicators: LandingPageTrustIndicatorsMutation
	testimonials: LandingPageTestimonialsMutation
	services: LandingPageServicesMutation
	results: LandingPageResultsMutation
	contact: LandingPageContactMutation
	footer: LandingPageFooterMutation
}

input SeasonalContentSeasonsSpringMutation {
	title: String
	description: String
	ctaText: String
	focusArea: String
	bgGradient: String
}

input SeasonalContentSeasonsSummerMutation {
	title: String
	description: String
	ctaText: String
	focusArea: String
	bgGradient: String
}

input SeasonalContentSeasonsAutumnMutation {
	title: String
	description: String
	ctaText: String
	focusArea: String
	bgGradient: String
}

input SeasonalContentSeasonsWinterMutation {
	title: String
	description: String
	ctaText: String
	focusArea: String
	bgGradient: String
}

input SeasonalContentSeasonsMutation {
	spring: SeasonalContentSeasonsSpringMutation
	summer: SeasonalContentSeasonsSummerMutation
	autumn: SeasonalContentSeasonsAutumnMutation
	winter: SeasonalContentSeasonsWinterMutation
}

input SeasonalContentMutation {
	seasons: SeasonalContentSeasonsMutation
}

input PageMutation {
	title: String
	description: String
	body: JSON
}

input PostMutation {
	title: String
	description: String
	date: String
	body: JSON
}

schema {
	query: Query
	mutation: Mutation
}
