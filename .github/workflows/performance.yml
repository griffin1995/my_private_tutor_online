# CONTEXT7 SOURCE: /actions/runner - GitHub Actions workflow configuration for performance monitoring
# CONTEXT7 SOURCE: /googlechrome/lighthouse-ci - Lighthouse CI automation for performance testing
# DEPLOYMENT REASON: CI/CD performance monitoring integration with automated gates and budget enforcement
name: Performance Monitoring

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run performance tests daily at 6 AM UTC for continuous monitoring
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '20.x'
  LIGHTHOUSE_CI_VERSION: '0.15.x'

jobs:
  performance-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 20  # Fetch enough history for Lighthouse CI ancestor detection
          
      - name: Fetch base branch for comparison
        if: github.event_name == 'pull_request'
        run: git fetch --depth=1 origin +refs/heads/${{github.base_ref}}:refs/remotes/origin/${{github.base_ref}}
        
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Lighthouse CI CLI
        run: npm install -g @lhci/cli@${{ env.LIGHTHOUSE_CI_VERSION }}
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Run Lighthouse CI healthcheck
        run: lhci healthcheck --fatal
        
      - name: Run Lighthouse CI audit
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_BUILD_CONTEXT__EXTERNAL_BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports-${{ github.run_number }}
          path: |
            .lighthouseci/**/*.html
            .lighthouseci/**/*.json
            
  performance-budgets:
    name: Performance Budget Validation
    runs-on: ubuntu-latest
    needs: performance-audit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Lighthouse CI CLI
        run: npm install -g @lhci/cli@${{ env.LIGHTHOUSE_CI_VERSION }}
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Validate performance budgets
        run: |
          echo "🎯 ROYAL CLIENT PERFORMANCE STANDARDS - BUDGET VALIDATION"
          lhci assert --preset=lighthouse:recommended \
            --assertions.first-contentful-paint='["error", {"maxNumericValue": 2000}]' \
            --assertions.interactive='["error", {"maxNumericValue": 5000}]' \
            --assertions.largest-contentful-paint='["error", {"maxNumericValue": 4000}]' \
            --assertions.speed-index='["error", {"maxNumericValue": 3500}]' \
            --assertions.cumulative-layout-shift='["error", {"maxNumericValue": 0.1}]' \
            --assertions.total-blocking-time='["error", {"maxNumericValue": 500}]' \
            --assertions.performance='["error", {"minScore": 0.9}]' \
            --assertions.accessibility='["error", {"minScore": 0.95}]' \
            --assertions.best-practices='["error", {"minScore": 0.9}]' \
            --assertions.seo='["error", {"minScore": 0.95}]'
            
      - name: Performance budget summary
        if: always()
        run: |
          echo "📊 PERFORMANCE BUDGET SUMMARY"
          echo "✅ First Contentful Paint: < 2s"
          echo "✅ Interactive: < 5s" 
          echo "✅ Largest Contentful Paint: < 4s"
          echo "✅ Speed Index: < 3.5s"
          echo "✅ Cumulative Layout Shift: < 0.1"
          echo "✅ Total Blocking Time: < 500ms"
          echo "✅ Performance Score: ≥ 90%"
          echo "✅ Accessibility Score: ≥ 95%"
          echo "✅ Best Practices Score: ≥ 90%"
          echo "✅ SEO Score: ≥ 95%"
          echo "🏆 Royal Client Quality Standards Maintained"
          
  core-web-vitals:
    name: Core Web Vitals Monitoring  
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Start application for testing
        run: |
          npm start &
          sleep 15
          curl -f http://localhost:3000 || exit 1
        timeout-minutes: 2
        
      - name: Run Core Web Vitals test
        run: npm run test:performance
        timeout-minutes: 10
        
      - name: Core Web Vitals report
        if: always()
        run: |
          echo "🎯 CORE WEB VITALS REPORT"
          echo "Largest Contentful Paint (LCP): Target < 2.5s"
          echo "First Input Delay (FID): Target < 100ms" 
          echo "Cumulative Layout Shift (CLS): Target < 0.1"
          echo "First Contentful Paint (FCP): Target < 1.8s"
          echo "Interaction to Next Paint (INP): Target < 200ms"
          echo "Time to First Byte (TTFB): Target < 800ms"
          
  deployment-gate:
    name: Performance Deployment Gate
    runs-on: ubuntu-latest
    needs: [performance-audit, performance-budgets, core-web-vitals]
    if: always()
    
    steps:
      - name: Performance gate validation
        run: |
          echo "🚧 PERFORMANCE DEPLOYMENT GATE"
          
          # Check performance audit results
          if [ "${{ needs.performance-audit.result }}" != "success" ]; then
            echo "❌ Performance audit failed - deployment blocked"
            exit 1
          fi
          
          # Check performance budgets
          if [ "${{ needs.performance-budgets.result }}" != "success" ]; then
            echo "❌ Performance budgets exceeded - deployment blocked"
            exit 1
          fi
          
          # Check Core Web Vitals
          if [ "${{ needs.core-web-vitals.result }}" != "success" ]; then
            echo "❌ Core Web Vitals failed - deployment blocked"
            exit 1
          fi
          
          echo "✅ All performance gates passed"
          echo "🏆 Ready for royal client deployment"
          echo "🚀 Performance standards maintained for premium tutoring service"
          
      - name: Performance summary
        if: success()
        run: |
          echo "## 📈 Performance Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Royal Client Performance Standards Met**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Performance Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse CI audit completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Performance budgets validated" >> $GITHUB_STEP_SUMMARY
          echo "- Core Web Vitals monitoring passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏆 Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Score: ≥ 90%" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility Score: ≥ 95%" >> $GITHUB_STEP_SUMMARY
          echo "- Best Practices Score: ≥ 90%" >> $GITHUB_STEP_SUMMARY
          echo "- SEO Score: ≥ 95%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Deployment approved for premium tutoring service**" >> $GITHUB_STEP_SUMMARY