{
	"name": "my-tutor-website",
	"version": "0.1.0",
	"private": true,
	"scripts": {
		"dev": "next dev --turbopack",
		"dev:trace": "NEXT_TURBOPACK_TRACING=1 next dev --turbopack",
		"dev:fast": "next dev --turbopack --experimental-debug-memory-usage",
		"dev:profile": "NODE_OPTIONS=--inspect next dev --turbopack",
		"clean": "rm -rf .next cache node_modules/.cache",
		"clean:full": "rm -rf .next cache node_modules/.cache .tsbuildinfo coverage playwright-report test-results",
		"build": "next build",
		"build:fast": "NODE_ENV=production next build",
		"build:trace": "NEXT_TURBOPACK_TRACING=1 next build --turbopack",
		"build:analyze": "ANALYZE=true next build",
		"build:profile": "NODE_OPTIONS=--heap-prof next build",
		"build:clean": "npm run clean:full && next build",
		"clean-cache": "rm -rf .next/cache cache",
		"start": "next start",
		"lint": "next lint",
		"validate:cms-architecture": "node scripts/validate-cms-architecture.js",
		"lint:fix": "next lint --fix",
		"format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
		"format:check": "prettier --check \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
		"typecheck": "tsc --noEmit",
		"typecheck:trace": "tsc --noEmit --extendedDiagnostics",
		"typecheck:watch": "tsc --noEmit --watch",
		"test": "jest",
		"test:watch": "jest --watch",
		"test:coverage": "jest --coverage",
		"test:parallel": "jest --maxWorkers=100%",
		"test:ci": "jest --config jest.config.ci.js --ci --maxWorkers=100%",
		"test:ci:parallel": "jest --config jest.config.ci.js --ci --maxWorkers=100% --workerThreads",
		"test:shard": "jest --shard",
		"test:e2e": "playwright test",
		"test:e2e:ui": "playwright test --ui",
		"test:e2e:parallel": "playwright test --workers=4",
		"optimize:images": "node scripts/optimize-images.mjs",
		"optimize:duplicates": "node scripts/cleanup-duplicates.mjs",
		"optimize:remove-duplicates": "node scripts/remove-duplicates.mjs",
		"optimize:all": "npm run optimize:images && npm run optimize:remove-duplicates",
		"optimize:phase2": "node scripts/phase2-image-optimizer.mjs",
		"darken:images": "node scripts/darken-images.mjs",
		"test:accessibility": "playwright test tests/e2e/accessibility.spec.ts",
		"test:performance": "playwright test tests/integration/performance.test.ts",
		"test:all": "npm run test && npm run test:e2e",
		"analyze": "ANALYZE=true npm run build",
		"tina:dev": "tinacms dev",
		"tina:build": "tinacms build",
		"quality": "npm run typecheck && npm run lint && npm run format:check && npm run test",
		"quality:fix": "npm run typecheck && npm run lint:fix && npm run format",
		"quality:fast": "npm run typecheck:trace && npm run lint:fix && npm run format",
		"dev:debug": "npm run clean-cache && npm run dev:profile",
		"dev:full-clean": "npm run clean:full && npm install && npm run dev",
		"dev:fresh": "npm run clean:full && npm run dev:fast",
		"dev:analyze-trace": "node scripts/dev-utils.mjs trace",
		"dev:analyze-typescript": "node scripts/dev-utils.mjs typescript",
		"dev:analyze-bundle": "node scripts/dev-utils.mjs bundle",
		"dev:profile-build": "node scripts/dev-utils.mjs profile",
		"dev:health": "node scripts/dev-utils.mjs health",
		"infrastructure:init": "node scripts/infrastructure-init.js",
		"infrastructure:backup": "node -e \"require('./src/lib/infrastructure/database-backup').defaultBackupManager.createFullBackup().then(m => console.log('Backup completed:', m)).catch(console.error)\"",
		"infrastructure:health": "curl -s http://localhost:3000/api/infrastructure/health | jq '.'",
		"infrastructure:test": "npm run infrastructure:backup && npm run infrastructure:health",
		"emergency:backup": "node -e \"require('./src/lib/infrastructure/database-backup').defaultBackupManager.createFullBackup().then(() => console.log('✅ Emergency backup completed')).catch(err => { console.error('❌ Emergency backup failed:', err); process.exit(1); })\"",
		"emergency:health": "curl -s http://localhost:3000/api/infrastructure/health || echo '❌ Health check failed'",
		"monitoring:start": "node -e \"require('./src/lib/infrastructure/monitoring').createInfrastructureMonitor().startContinuousMonitoring(5); console.log('Monitoring started'); setInterval(() => {}, 1000)\"",
		"logs:errors": "tail -f logs/errors/errors-$(date +%Y-%m-%d).jsonl || echo 'No error logs found'",
		"logs:monitoring": "tail -f logs/monitoring/monitoring-$(date +%Y-%m-%d).log || echo 'No monitoring logs found'",
		"performance:audit": "lhci autorun",
		"performance:budget": "lhci assert --budgetsFile=./performance-budget.json",
		"performance:monitor": "lhci collect --config=.lighthouserc.js",
		"ci:performance": "npm run build && npm run performance:audit && npm run performance:budget",
		"monitoring:enterprise": "node -e \"require('./src/lib/monitoring/enterprise-monitoring').getEnterpriseMonitoring().getSystemStatus().then(console.log).catch(console.error)\"",
		"monitoring:dashboard": "node -e \"require('./src/lib/monitoring/real-time-dashboard').getRealTimeMonitoringDashboard().getCurrentMetrics().then(console.log).catch(console.error)\"",
		"monitoring:alerts": "node -e \"require('./src/lib/monitoring/performance-alerts').getPerformanceAlertingSystem().getAlertStatistics().then ? console.log : console.log\"",
		"monitoring:test-alert": "node -e \"require('./src/lib/monitoring/enterprise-monitoring').getEnterpriseMonitoring().triggerAlert('test_alert', 'warning', { test: true, timestamp: new Date() })\"",
		"monitoring:health-check": "curl -s http://localhost:3000/api/infrastructure/health | jq '.' || echo 'Health check endpoint not available'",
		"monitoring:comprehensive": "npm run monitoring:enterprise && npm run monitoring:dashboard && npm run monitoring:alerts",
		"phase1:validate": "node scripts/phase1-validation.js",
		"phase1:validate:full": "node scripts/phase1-validation.js --full",
		"phase1:report": "cat phase1-validation-report.json",
		"dev:pesticide": "NEXT_PUBLIC_ENABLE_PESTICIDE=true npm run dev",
		"dev:pesticide-off": "NEXT_PUBLIC_ENABLE_PESTICIDE=false npm run dev",
		"dev:debug-layout": "NEXT_PUBLIC_ENABLE_PESTICIDE=true npm run dev",
		"deploy:dev": "node scripts/deploy-environment.mjs development",
		"deploy:staging": "node scripts/deploy-environment.mjs staging",
		"deploy:production": "node scripts/deploy-environment.mjs production",
		"deploy:analyze": "node scripts/deploy-environment.mjs staging --analyze",
		"tokens:build": "style-dictionary build --config src/design-tokens/config.json",
		"tokens:watch": "style-dictionary build --config src/design-tokens/config.json --watch",
		"tokens:clean": "rm -rf src/styles/tokens/ src/design-tokens/generated/ tailwind.config.tokens.js",
		"audit:css": "wallace .next/static/css/*.css --json > reports/audits/css-analysis.json",
		"audit:colors": "css-color-extractor .next/static/css/*.css reports/audits/colors.json --format=json",
		"audit:palette": "css-color-extractor .next/static/css/*.css reports/audits/palette.html --format=html",
		"audit:accessibility": "pa11y-ci --config .pa11yci.json --json > reports/audits/accessibility.json",
		"audit:visual": "playwright test tests/visual-regression.spec.ts",
		"audit:design": "playwright test tests/design-system.spec.ts",
		"audit:validate": "constyble .next/static/css/*.css --config .constyblerc",
		"audit:full": "npm run build && npm run audit:css && npm run audit:colors && npm run audit:validate",
		"audit:report": "node scripts/generate-audit-report.js",
		"prebuild": "npm run tokens:build",
		"test:design": "npm run audit:full && npm run audit:accessibility",
		"knip": "knip"
	},
	"overrides": {
		"@visx/axis": {
			"react": "^19.0.0",
			"react-dom": "^19.0.0"
		},
		"@graphiql/react": {
			"react": "^19.0.0",
			"react-dom": "^19.0.0"
		},
		"@monaco-editor/react": {
			"react": "^19.0.0",
			"react-dom": "^19.0.0"
		},
		"@reach/portal": {
			"react": "^19.0.0",
			"react-dom": "^19.0.0"
		},
		"@reach/utils": {
			"react": "^19.0.0",
			"react-dom": "^19.0.0"
		},
		"@react-spring/zdog": {
			"react": "^19.0.0",
			"react-dom": "^19.0.0"
		},
		"@tinacms/schema-tools": {
			"yup": "^1.6.1"
		},
		"react": "^19.0.0",
		"react-dom": "^19.0.0"
	},
	"dependencies": {
		"@headlessui/react": "^2.2.4",
		"@hookform/resolvers": "^5.1.1",
		"@radix-ui/react-accordion": "^1.2.11",
		"@radix-ui/react-aspect-ratio": "^1.1.7",
		"@radix-ui/react-avatar": "^1.1.10",
		"@radix-ui/react-checkbox": "^1.3.2",
		"@radix-ui/react-dialog": "^1.1.14",
		"@radix-ui/react-label": "^2.1.7",
		"@radix-ui/react-navigation-menu": "^1.2.13",
		"@radix-ui/react-progress": "^1.1.7",
		"@radix-ui/react-select": "^2.2.5",
		"@radix-ui/react-separator": "^1.1.7",
		"@radix-ui/react-slot": "^1.2.3",
		"@radix-ui/react-tabs": "^1.1.12",
		"@sentry/nextjs": "^9.36.0",
		"@tailwindcss/aspect-ratio": "^0.4.2",
		"@tailwindcss/container-queries": "^0.1.1",
		"@tailwindcss/forms": "^0.5.10",
		"@tailwindcss/typography": "^0.5.15",
		"@tinacms/cli": "^0.60.5",
		"@vercel/analytics": "^1.5.0",
		"@vercel/speed-insights": "^1.2.0",
		"autoprefixer": "^10.4.21",
		"class-variance-authority": "^0.7.1",
		"clsx": "^2.1.1",
		"cobe": "^0.6.4",
		"critters": "^0.0.23",
		"date-fns": "^4.1.0",
		"embla-carousel-autoplay": "^8.6.0",
		"embla-carousel-react": "^8.6.0",
		"flowbite-react": "^0.12.9",
		"framer-motion": "^12.23.21",
		"fuse.js": "^7.1.0",
		"immer": "^10.1.1",
		"jose": "^6.0.12",
		"lucide-react": "^0.525.0",
		"mongodb": "^6.18.0",
		"motion": "^12.23.12",
		"nanoid": "^5.1.5",
		"next": "15.3.4",
		"next-intl": "^4.3.4",
		"next-seo": "^6.8.0",
		"react": "^19.0.0",
		"react-countup": "^6.5.3",
		"react-dom": "^19.0.0",
		"react-dropzone": "^14.3.8",
		"react-hook-form": "^7.59.0",
		"react-icon-cloud": "^4.1.7",
		"react-intersection-observer": "^9.16.0",
		"react-masonry-css": "^1.0.16",
		"react-speech-recognition": "^4.0.1",
		"recharts": "^3.1.2",
		"rough-notation": "^0.5.1",
		"sonner": "^2.0.6",
		"tailwind-clamp": "^4.1.0",
		"tailwind-merge": "^3.3.1",
		"tesseract.js": "^6.0.1",
		"use-debounce": "^10.0.5",
		"uuid": "^11.1.0",
		"vercel": "^48.5.0",
		"web-vitals": "^5.0.3",
		"zod": "^3.25.76",
		"zustand": "^5.0.7"
	},
	"devDependencies": {
		"@axe-core/playwright": "^4.10.2",
		"@axe-core/react": "^4.10.2",
		"@babel/core": "^7.28.4",
		"@babel/generator": "^7.28.3",
		"@babel/parser": "^7.28.4",
		"@babel/traverse": "^7.28.4",
		"@commitlint/cli": "^19.8.1",
		"@commitlint/config-conventional": "^19.8.1",
		"@eslint/eslintrc": "^3",
		"@next/bundle-analyzer": "^15.5.2",
		"@playwright/test": "^1.55.1",
		"@testing-library/dom": "^10.4.1",
		"@testing-library/jest-dom": "^6.6.3",
		"@testing-library/react": "^16.3.0",
		"@testing-library/user-event": "^14.6.1",
		"@types/jest": "^29.5.14",
		"@types/node": "^20.19.21",
		"@types/react": "^19",
		"@types/react-dom": "^19",
		"constyble": "^1.3.0",
		"css-color-extractor-cli": "^1.1.4",
		"eslint": "^9",
		"eslint-config-next": "^15.5.4",
		"eslint-plugin-jsx-a11y": "^6.10.2",
		"glob": "^11.0.3",
		"husky": "^9.1.7",
		"identity-obj-proxy": "^3.0.0",
		"imagemin": "^9.0.1",
		"imagemin-mozjpeg": "^10.0.0",
		"imagemin-pngquant": "^10.0.0",
		"imagemin-webp": "^8.0.0",
		"jest": "^29.7.0",
		"jest-environment-jsdom": "^29.7.0",
		"knip": "^5.65.0",
		"linkinator": "^7.1.3",
		"lint-staged": "^16.1.2",
		"p-limit": "^7.1.1",
		"pa11y-ci": "^4.0.1",
		"postcss": "^8.4.35",
		"sharp": "^0.34.3",
		"style-dictionary": "^4.4.0",
		"tailwindcss": "^3.4.1",
		"typescript": "^5.6.3",
		"wallace-cli": "^3.2.0"
	},
	"sideEffects": [
		"*.css",
		"*.scss",
		"*.sass",
		"*.less",
		"**/*.css",
		"**/*.scss",
		"**/*.sass",
		"**/*.less",
		"./src/styles/**/*",
		"./src/app/globals.css"
	]
}
